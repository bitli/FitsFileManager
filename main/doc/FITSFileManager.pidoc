\documentclass PIScriptDoc

\script {
   FITSFileManager
}

\keywords {
   documentation, reference documentation. PIDoc
}

\author {
   Jean-Marc Lugrin, PI user
}

\copyright {
   2014, Jean-Marc Lugrin
}

\brief {
   This script copy or rename FITS files following rules based on FITS keywords and original file name.
}

\description {

   \center \image FITSFileManager.png

   The script FITSFileManager allows you to rename FITS image files by copying or moving them to new locations selected by a set of rule. The new location path is build from a template where \lref variables {variable parts} are replaced with values extracted from FITS keys and other information of the file or a counter.

   \subsection { Operations } {

      To rename a set of files proceed as follow:

      \list[ordered] {
         { Select the files to move or copy. The selected files can be individually checked or un-checked. }
         { Select a predefined configuration or enter a new template to generate the target path.

          In a template you can use variables like \v {&binning;} to substitute values based on the source image file name, the value of a FITS keywords or synthethic variables defined in your \lref manage_configurations {configuration}.  }
          { \e {Adavanced usage:} If needed adapt the \lref file_name_regexp {file name regular expression} used to select pars of the file name to use in the template. }
          { You can also enter a \lref group_template { Group template } to control a counter.}
          { Specifiy the \lref output_base_directory {output directory}. }
          { Finally execute the \lref operation {operation} to move the files, to copy them or to load/save them to check their validity and add a FITS keyword about the original file name. }
      }

      The list of transformation is updated as you type templates and other parameters and is visible in the window \e { Resulting operations }.

      The synthetic variables are defined in a \e configuration that you may edit.
   }
}

\usage {

   \label variables
   \subsection { Variables } {
      The variables have the general form \v { '&name:present?missing;' }, although most of the time they have simply the form \v{'&name;'}. The 'name' identifies the variable, it may be a FITS key or a synthetic variable name.
\list {
      { The optional 'present' part is the string that will be used as the replacement value if the variable has a value. Usually \v{ :present} is not specified and the value of the variable is used as the replacement string. You can also  have an empty 'present' value (as \v{&TELESCOP:;}), in which case the variable is checked for presence (an error is generated if the variable is missing) but its value does not contribute to the target path. }
      { The optional \v{?missing} part is used if the variable is not present in the file (for example \v{'&OBJECT?unknown;}).  You can also have an empty 'missing' value (like \v {'&binning?;}) in which case there is no error if the variable has no value. }
      }
      The synthetic variables are described in the section 'target template' below. They are built from the FITS keywords (following rules specified in a 'configuration') from the number of the file being processed or from the a regular expression applied to the file name. The source file regular expression can be used, for example, to extract the part of the file name  before the first dash and use it as a prefix for all files.

   The files are processed in the order they appear in the table, the variable \v{&rank;} provides the image number to help generating a unique file file. In addition a 'group' string can be generated using from the 'group' template. A \v{&count;} variable is increased for each different group (for example each target directory if the group template contained the target directory). The values are cleaned up of special characters, so that they form legal file names.
   }

   \subsection { Target template } { Define how the target file path will be generated. The text of this field is used as the output path, except that the variables are replaced by their value according to the current \e configuration. The \lref variable {variables} include the FITS keywords and the synthetic variables defined in the configuration. A typical configuration contains the following keywords (your actual configuration may be different):

      \definition {
         {&binning;} { Binning from XBINNING and YBINNING as integers, like 2x2. }
         {&exposure;} { The exposure from EXPOSURE, but as an integer (assume seconds). }
         {&extension;} { The extension of the source file (with the dot.), will use input extension if not specified }
         {&filename;} { The file name part of the source file. }
         {&filter;} { The filter name from FILTER as lower case trimmed normalized name. }
         {&night;} { An integer identifying the night, requires JD and LONG-OBS - EXPERIMENTAL. }
         {&temp;} { The SET-TEMP temperature in C as an integer. }
         {&type;} { The IMAGETYP normalized to 'flat', 'bias', 'dark', 'light'. }
         {&0; &1;, ... } { The corresponding match from the source file name regular expression field. }
      }

      The following keywords are dynamic (their values depends on the file order) and are always present:

      \definition {
         {&count;} { The number of the file being moved/copied int the current group. }
         {&rank;} { The number of the file in the order of the input file list. }
      }
   You can enter the template or select one of the predefined one and optionaly modify it.

   Example of template: \code { &1;_&binning;_&temp;C_&type;_&exposure;s_&filter;_&count;&extension; }
   }

   \label file_name_regexp
   \subsection { Source filename reg exp } { Defines a regular expression (without the surrounding slashes) that will be applied to all file names, without the extension. The 'match' array resulting from the regular expression matching can be used in the target file name template as numbered variables. \v{&0;} represent the whole matched expression, '&&1' the first group, and so on. In case of error the field turns red. You can enter the regexp or select one of the predefined one and optionally modify it.

   See \xref { https:\/\/developer.mozilla.org\/en-US\/docs\/JavaScript\/Guide\/Regular_Expressions} { Javascirpt Regular_Expressions } for more informations on regular expresssions.

   Example of regular expression: \code {(\[^-_.\]+)(?:\[._-\]|$) } }

   \label group_template
   \subsection { Group template}  { Defines the template to generate a group name used by the synthetic variable \v{&count;}. Each FITS image generate a group name exactly as it generates a path, but using the group template.  A count of image will be kept for each different group name and can be used as the variable \v{&count;} in the target path template. All variables can be used in the group template, except \v{&count;}. In addition you can use the following variable:

      \definition {
         {\c{&targetDir;}}{The directory part of the target file name. }
      }
      Leave blank or use a fixed name to have a single global counter.
      Example of group templates:
      \definition {
         {&targetDir;} { counts images in each target directory. }
         {&filter;} { counts the images separetely for each filter (independently of the target directory). }
      }

      You can enter the template or select one of the predefined one and optionaly modify it.

      Example of group definition: \code { &targetdir; }
   }

   \label manage_configurations
   \subsection { Manage configurations } {  The configuration defines how the synthetic variables are created, for example the FITS key to use, the format of the value, specific operations like changing case or renaming filter names. FITSFileManager keeps track of multiple configurations, only one at a time may be active. Currently the list of configuration is fixed (this will be made more dynamic in the future). It is expected that most users could use the default configuration, or may be the default with some simple adjustments. It is also possible to have a set of configuration for different image type, but currently you must still change the configuration or the template between image types.  Some configuration options may require more advanced understanding of regular expressions and the FITS key words.

   Click on the Manage configurations... button to change or edit the configuration.
   }

   \label output_base_directory
   \subsection { Output base directory } { Select the directory for the destination files. The target file template may specify directories in the name, in which case the required subdirectories will be created if needed.
   }


   \label operation
   \subsection { Operations } { The operations Copy/Move copy or move the files directly, without adding any FITS keywords.  The operation Load/SaveAs loads each image temporarily in the workspace and save it to the new location. An ORIGFILE keyword with the original file name is added if it is not already present.

   The operation buttons may be disabled if the operation is not possible (for example if the output directory is not specified). }

}

\related { https:\/\/developer.mozilla.org\/en-US\/docs\/JavaScript\/Guide\/Regular_Expressions} { Regular_Expressions }

\related { http:\/\/fits.gsfc.nasa.gov\/fits_home.html} {FITS standard }

\make[noauthors]


